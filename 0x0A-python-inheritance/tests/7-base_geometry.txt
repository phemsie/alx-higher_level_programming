
Sign up
AgeseVictor
/
alx-higher_level_programming
Public
Code
Issues
Pull requests
Actions
Projects
Security
Insights
alx-higher_level_programming/0x0A-python-inheritance/tests/7-base_geometry.txt
@AgeseVictor
AgeseVictor inheritance
 1 contributor
89 lines (68 sloc)  2.11 KB
The ``7-base_geometry`` module
==============================

Using ``BaseGeometry``
---------------------

This is an example text file in reStructuredText format.  First import
``BaseGeometry`` from the ``7-base_geometry.py`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

>>> bg.integer_validator("distance")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("distance", [2, 4])
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("", 77)

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.integer_validator("my_int", 12.43)
Traceback (most recent call last):
...
TypeError: my_int must be an integer

>>> bg.integer_validator("width", (1, 2))
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> bg.integer_validator("width", 'w')
Traceback (most recent call last):
...
TypeError: width must be an integer

>>> bg.integer_validator("my_int", None)
Traceback (most recent call last):
...
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", True)
Traceback (most recent call last):
...
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", {1, 2})
Traceback (most recent call last):
...
TypeError: my_int must be an integer

>>> bg.integer_validator("my_int", (3, ))
Traceback (most recent call last):
...
TypeError: my_int must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
